import { CONSTANTS } from "../actions";



const initialState = {};

const boardsReducer = (state = initialState, action) => {
  switch (action.type) {
    case CONSTANTS.ADD_LIST: {
      const { boardID, id } = action.payload;

      const board = state[boardID];
      const newListID = `list-${id}`;
      //when we know the exact board we will only spread the board.lists structure and we will add the new list there
      const newLists = [...board.lists, newListID];
      board.lists = newLists;
      //we return the old state plus the edited board
      return { ...state, [boardID]: board };
    }

    case CONSTANTS.DRAG_HAPPENED: {
      const { boardID } = action.payload;
      const board = state[boardID];
      const lists = board.lists;
      const {
        droppableIndexEnd,
        droppableIndexStart,

        type
      } = action.payload;

      // draggin lists around
      if (type === "list") {
        //1st argument specifies which position of an existing element should be removed and the 2nd specifies the number of elements which in our case is 1
        const pulledOutList = lists.splice(droppableIndexStart, 1);
        //1st argument specifies the destination,2nd argument with 0 means that no elements will be removed
        //3rd argument is the value that we want to add to the array
        lists.splice(droppableIndexEnd, 0, ...pulledOutList);
        board.lists = lists;//we pass the new list order
        //we return and update the state of the new list order
        return { ...state, [boardID]: board };
      }
      return state;
    }
    case CONSTANTS.DELETE_LIST: {
      const { listID, boardID } = action.payload;
      const board = state[boardID];
      const lists = board.lists;
      //we filter the list and we attribute to the 'newLists' element only the lists structure that are not having the passed listID
      const newLists = lists.filter(id => id !== listID);
      board.lists = newLists;
      return { ...state, [boardID]: board };
    }

    case CONSTANTS.ADD_BOARD: {
       //from addBoard action we get the payload with emoji,title,description and the id generated by uuid()
      const {emoji, title, description, id } = action.payload;
      const newID = `board-${id}`;//we set the id of the board and we will use it as a route
      const newBoard = {
        id: newID,
        emoji,
        title,
        description,
        lists: []//at the begining we will have an empty array list
      };
      //we use the spread operator to keep the old state and to add a new property which is the newBoard
      const newState = { ...state, [newID]: newBoard };
      return newState;
    }

    case CONSTANTS.DELETE_BOARD:{
      const {boardID} = action.payload;//we get the id passed from the boardActions
      const newState= state;//we are not directly modifying the state in order to prevent data corruption and we pass it to a newState element
      delete newState[boardID];

      return newState;//we return the new state
    }

    case CONSTANTS.IMPORT_BOARD: {

      const { id, emoji, title, description, lists } = action.payload;
      const newID = id;
      const newBoard = {
        id: newID,
        emoji,
        title,
        description,
        lists: lists
      };//we get the payload from boardActions
      //we use the spread operator to keep the old state and to add the new imported board
      const newState = { ...state, [newID]: newBoard };
      return newState;
    }

    case CONSTANTS.EDIT_BOARD: {

      const { id, newEmoji, newTitle, newDescription} = action.payload;

      const board = state[id];
      console.log("STATE OF BOARD ID : ", state[id]);

      board.emoji = newEmoji;
      board.title = newTitle;
      board.description = newDescription;

      return {...state, [`board-${id}`]: board};
    }


    default:
      return state;
  }

};

export default boardsReducer;